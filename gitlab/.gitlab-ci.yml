stages: # for running one by one in sequence and not running in parallel
  - build
  - test
  - deploy

variables:
  abc: def

build_program:  # telling gitlab to perform a job for us
  stage: build  # specify which stage this job belongs to # each stage can have multiple jobs that run in parallel
  image: python  # required image from hub.docker.com  # common image can be mentioned at top also
  before_script:
    - echo "executing script"
  script: # for all the job steps
    - python setup.py install # non-zero status means job failed # use echo $? if command by default doesn't return status code
    - mkdir output
    - cd output
    - smita > output.txt
    - echo $GITLAB_USER_NAME >> output.txt  # automatic gitlab variable
    - echo $Password >> output.txt # variable set by us on UI
    - echo $abc >> output.txt  # variable set by us in .gitlab-ci.yml
  after_script:
    - echo "executed script"
  artifacts: # because by default jobs don't save data
    paths:
      - output/

test_program:
  image: alpine  # smaller image
  stage: test
  script:
    - cd output
    - grep "smita" output.txt
    - grep "Smita Patankar" output.txt
    - grep "12345" output.txt
    - grep "def" output.txt

deploy_program:
  image: alpine
  stage: deploy
  when: manual  # for triggering manually
  allow_failure: false  # so that further stages don't get executed
  only:
    - master  # so that it doesn't run for other branches
  script:
    - echo
